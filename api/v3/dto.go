// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v3

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for FieldsSchema.
const (
	BulletinFamily FieldsSchema = "bulletinFamily"
	Cvelist        FieldsSchema = "cvelist"
	Cvss           FieldsSchema = "cvss"
	Description    FieldsSchema = "description"
	Href           FieldsSchema = "href"
	Id             FieldsSchema = "id"
	Lastseen       FieldsSchema = "lastseen"
	Modified       FieldsSchema = "modified"
	Published      FieldsSchema = "published"
	SourceData     FieldsSchema = "sourceData"
	SourceHref     FieldsSchema = "sourceHref"
	Title          FieldsSchema = "title"
	Type           FieldsSchema = "type"
)

// Defines values for ResultSchema.
const (
	Error ResultSchema = "error"
	OK    ResultSchema = "OK"
)

// Defines values for SearchSoftwareRequestSchemaType.
const (
	Cpe      SearchSoftwareRequestSchemaType = "cpe"
	Software SearchSoftwareRequestSchemaType = "software"
)

// CVSS2Schema defines model for CVSS2Schema.
type CVSS2Schema = map[string]interface{}

// CVSS3Schema defines model for CVSS3Schema.
type CVSS3Schema struct {
	CvssV3              CVSSV3Schema `json:"cvssV3"`
	ExploitabilityScore float64      `json:"exploitabilityScore"`
	ImpactScore         float64      `json:"impactScore"`
}

// CVSSSchema defines model for CVSSSchema.
type CVSSSchema struct {
	Score  float64 `json:"score"`
	Vector string  `json:"vector"`
}

// CVSSV3Schema defines model for CVSSV3Schema.
type CVSSV3Schema struct {
	AttackComplexity      string  `json:"attackComplexity"`
	AttackVector          string  `json:"attackVector"`
	AvailabilityImpact    string  `json:"availabilityImpact"`
	BaseScore             float64 `json:"baseScore"`
	BaseSeverity          string  `json:"baseSeverity"`
	ConfidentialityImpact string  `json:"confidentialityImpact"`
	IntegrityImpact       string  `json:"integrityImpact"`
	PrivilegesRequired    string  `json:"privilegesRequired"`
	Scope                 string  `json:"scope"`
	UserInteraction       string  `json:"userInteraction"`
	VectorString          string  `json:"vectorString"`
	Version               string  `json:"version"`
}

// ErrorDataSchema defines model for ErrorDataSchema.
type ErrorDataSchema struct {
	Error     string `json:"error"`
	ErrorCode int    `json:"errorCode"`
}

// ErrorSchema defines model for ErrorSchema.
type ErrorSchema struct {
	Data   ErrorDataSchema `json:"data"`
	Result ResultSchema    `json:"result"`
}

// FieldsSchema defines model for FieldsSchema.
type FieldsSchema string

// ResultSchema defines model for ResultSchema.
type ResultSchema string

// SearchByIDRequestSchema defines model for SearchByIDRequestSchema.
type SearchByIDRequestSchema struct {
	ApiKey     string                     `json:"apiKey"`
	Id         SearchByIDRequestSchema_Id `json:"id"`
	References *bool                      `json:"references,omitempty"`
}

// SearchByIDRequestSchemaId0 defines model for .
type SearchByIDRequestSchemaId0 = string

// SearchByIDRequestSchemaId1 defines model for .
type SearchByIDRequestSchemaId1 = []string

// SearchByIDRequestSchema_Id defines model for SearchByIDRequestSchema.Id.
type SearchByIDRequestSchema_Id struct {
	union json.RawMessage
}

// SearchByIDResponseDataSchema defines model for SearchByIDResponseDataSchema.
type SearchByIDResponseDataSchema struct {
	Documents  *SearchByIDResponseDocumentsSchema  `json:"documents,omitempty"`
	References *SearchByIDResponseReferencesSchema `json:"references,omitempty"`
}

// SearchByIDResponseDocumentsSchema defines model for SearchByIDResponseDocumentsSchema.
type SearchByIDResponseDocumentsSchema map[string]SearchDocumentSchema

// SearchByIDResponseReferencesSchema defines model for SearchByIDResponseReferencesSchema.
type SearchByIDResponseReferencesSchema map[string]SearchReferenceSchema

// SearchByIDResponseSchema defines model for SearchByIDResponseSchema.
type SearchByIDResponseSchema struct {
	Data   SearchByIDResponseSchema_Data `json:"data"`
	Result ResultSchema                  `json:"result"`
}

// SearchByIDResponseSchema_Data defines model for SearchByIDResponseSchema.Data.
type SearchByIDResponseSchema_Data struct {
	union json.RawMessage
}

// SearchDocumentSchema defines model for SearchDocumentSchema.
type SearchDocumentSchema struct {
	Internal *struct {
		ScoreHash *string `json:"score_hash,omitempty"`
	} `json:"_internal,omitempty"`
	State *struct {
		AffectedSoftwareMajorVersion *float64 `json:"affected_software_major_version,omitempty"`
		Dependencies                 *float64 `json:"dependencies,omitempty"`
		Score                        *float64 `json:"score,omitempty"`
	} `json:"_state,omitempty"`
	AffectedSoftware *[]struct {
		Name     *string `json:"name,omitempty"`
		Operator *string `json:"operator,omitempty"`
		Version  *string `json:"version,omitempty"`
	} `json:"affectedSoftware,omitempty"`
	BulletinFamily *string      `json:"bulletinFamily,omitempty"`
	Cvelist        *[]string    `json:"cvelist,omitempty"`
	Cvss           *CVSSSchema  `json:"cvss,omitempty"`
	Cvss2          *CVSS2Schema `json:"cvss2,omitempty"`
	Cvss3          *CVSS3Schema `json:"cvss3,omitempty"`
	Description    *string      `json:"description,omitempty"`
	Enchantments   struct {
		AffectedSoftware *struct {
			MajorVersion *[]struct {
				Name    *string `json:"name,omitempty"`
				Version *int    `json:"version,omitempty"`
			} `json:"major_version,omitempty"`
		} `json:"affected_software,omitempty"`
		Dependencies *struct {
			References *[]struct {
				IdList *[]string `json:"idList,omitempty"`
				Type   *string   `json:"type,omitempty"`
			} `json:"references,omitempty"`
		} `json:"dependencies,omitempty"`
		Score *struct {
			Value  *float64 `json:"value,omitempty"`
			Vector *string  `json:"vector,omitempty"`
		} `json:"score,omitempty"`
		VulnersScore *float64 `json:"vulnersScore,omitempty"`
	} `json:"enchantments"`
	Href            *string   `json:"href,omitempty"`
	Id              *string   `json:"id,omitempty"`
	ImmutableFields *[]string `json:"immutableFields,omitempty"`
	Lastseen        *string   `json:"lastseen,omitempty"`
	Modified        string    `json:"modified"`
	Published       *string   `json:"published,omitempty"`
	References      *[]string `json:"references,omitempty"`
	Reporter        *string   `json:"reporter,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Type            *string   `json:"type,omitempty"`
	VendorId        *string   `json:"vendorId"`
	ViewCount       *int      `json:"viewCount,omitempty"`
}

// SearchReferenceSchema defines model for SearchReferenceSchema.
type SearchReferenceSchema struct {
	Cve       *[]SearchReferenceSourceSchema `json:"cve,omitempty"`
	Github    *[]SearchReferenceSourceSchema `json:"github,omitempty"`
	Osv       *[]SearchReferenceSourceSchema `json:"osv,omitempty"`
	Ubuntucve *[]SearchReferenceSourceSchema `json:"ubuntucve,omitempty"`
	Veracode  *[]SearchReferenceSourceSchema `json:"veracode,omitempty"`
}

// SearchReferenceSourceSchema defines model for SearchReferenceSourceSchema.
type SearchReferenceSourceSchema struct {
	BulletinFamily      *string      `json:"bulletinFamily,omitempty"`
	Cpe                 *[]string    `json:"cpe,omitempty"`
	Cpe23               *[]string    `json:"cpe23,omitempty"`
	Cvelist             *[]string    `json:"cvelist,omitempty"`
	Cvss                *CVSSSchema  `json:"cvss,omitempty"`
	Cvss2               *CVSS2Schema `json:"cvss2,omitempty"`
	Cvss3               *CVSS3Schema `json:"cvss3,omitempty"`
	Cwe                 *[]string    `json:"cwe,omitempty"`
	Description         *string      `json:"description,omitempty"`
	Edition             *float32     `json:"edition,omitempty"`
	ExploitabilityScore *float64     `json:"exploitabilityScore,omitempty"`
	Href                *string      `json:"href,omitempty"`
	Id                  *string      `json:"id,omitempty"`
	ImpactScore         *float64     `json:"impactScore,omitempty"`
	Lastseen            *string      `json:"lastseen,omitempty"`
	Modified            *string      `json:"modified,omitempty"`
	Published           *string      `json:"published,omitempty"`
	Title               *string      `json:"title,omitempty"`
	Type                *string      `json:"type,omitempty"`
}

// SearchRequestSchema defines model for SearchRequestSchema.
type SearchRequestSchema struct {
	ApiKey string          `json:"apiKey"`
	Fields *[]FieldsSchema `json:"fields,omitempty"`
	Query  string          `json:"query"`
	Size   *int            `json:"size,omitempty"`
	Skip   *int            `json:"skip,omitempty"`
}

// SearchResponseDataSchema defines model for SearchResponseDataSchema.
type SearchResponseDataSchema struct {
	ExactMatch    bool                 `json:"exactMatch"`
	MaxSearchSize int                  `json:"maxSearchSize"`
	References    []string             `json:"references"`
	Search        []SearchResultSchema `json:"search"`
	Total         int                  `json:"total"`
}

// SearchResponseSchema defines model for SearchResponseSchema.
type SearchResponseSchema struct {
	Data   SearchResponseSchema_Data `json:"data"`
	Result ResultSchema              `json:"result"`
}

// SearchResponseSchema_Data defines model for SearchResponseSchema.Data.
type SearchResponseSchema_Data struct {
	union json.RawMessage
}

// SearchResultSchema defines model for SearchResultSchema.
type SearchResultSchema struct {
	Id              string                    `json:"_id"`
	Ignored         *[]string                 `json:"_ignored,omitempty"`
	Index           string                    `json:"_index"`
	Score           float64                   `json:"_score"`
	Source          *SearchResultSourceSchema `json:"_source,omitempty"`
	Type            string                    `json:"_type"`
	FlatDescription string                    `json:"flatDescription"`
	Highlight       struct {
		Description *[]string `json:"description,omitempty"`
		Href        *[]string `json:"href,omitempty"`
		Id          *[]string `json:"id,omitempty"`
		SourceData  *[]string `json:"sourceData,omitempty"`
		Title       *[]string `json:"title,omitempty"`
	} `json:"highlight"`
	Sort *[]float32 `json:"sort,omitempty"`
}

// SearchResultSourceSchema defines model for SearchResultSourceSchema.
type SearchResultSourceSchema struct {
	BulletinFamily *string      `json:"bulletinFamily,omitempty"`
	Cpe            *[]string    `json:"cpe,omitempty"`
	Cvelist        *[]string    `json:"cvelist,omitempty"`
	Cvss           *CVSSSchema  `json:"cvss,omitempty"`
	Cvss2          *CVSS2Schema `json:"cvss2,omitempty"`
	Cvss3          *CVSS3Schema `json:"cvss3,omitempty"`
	Description    *string      `json:"description,omitempty"`
	Href           *string      `json:"href,omitempty"`
	Id             *string      `json:"id,omitempty"`
	Lastseen       *string      `json:"lastseen,omitempty"`
	Modified       *string      `json:"modified,omitempty"`
	PrivateArea    *int         `json:"privateArea,omitempty"`
	Published      *string      `json:"published,omitempty"`
	SourceData     *string      `json:"sourceData,omitempty"`
	SourceHref     *string      `json:"sourceHref,omitempty"`
	Title          *string      `json:"title,omitempty"`
	Type           *string      `json:"type,omitempty"`
	Vhref          *string      `json:"vhref,omitempty"`
}

// SearchSoftwareDataSchema defines model for SearchSoftwareDataSchema.
type SearchSoftwareDataSchema struct {
	Search *[]SearchResultSourceSchema `json:"search,omitempty"`
	Total  *int32                      `json:"total,omitempty"`
}

// SearchSoftwareRequestSchema defines model for SearchSoftwareRequestSchema.
type SearchSoftwareRequestSchema struct {
	ApiKey             string                          `json:"apiKey"`
	Exactmatch         bool                            `json:"exactmatch"`
	MaxVulnerabilities int32                           `json:"maxVulnerabilities"`
	Software           string                          `json:"software"`
	Type               SearchSoftwareRequestSchemaType `json:"type"`
	Version            string                          `json:"version"`
}

// SearchSoftwareRequestSchemaType defines model for SearchSoftwareRequestSchema.Type.
type SearchSoftwareRequestSchemaType string

// SearchSoftwareResponseSchema defines model for SearchSoftwareResponseSchema.
type SearchSoftwareResponseSchema struct {
	Data   SearchSoftwareResponseSchema_Data `json:"data"`
	Result ResultSchema                      `json:"result"`
}

// SearchSoftwareResponseSchema_Data defines model for SearchSoftwareResponseSchema.Data.
type SearchSoftwareResponseSchema_Data struct {
	union json.RawMessage
}

// SearchByIDJSONRequestBody defines body for SearchByID for application/json ContentType.
type SearchByIDJSONRequestBody = SearchByIDRequestSchema

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRequestSchema

// SearchSoftwareJSONRequestBody defines body for SearchSoftware for application/json ContentType.
type SearchSoftwareJSONRequestBody = SearchSoftwareRequestSchema

// AsSearchByIDRequestSchemaId0 returns the union data inside the SearchByIDRequestSchema_Id as a SearchByIDRequestSchemaId0
func (t SearchByIDRequestSchema_Id) AsSearchByIDRequestSchemaId0() (SearchByIDRequestSchemaId0, error) {
	var body SearchByIDRequestSchemaId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchByIDRequestSchemaId0 overwrites any union data inside the SearchByIDRequestSchema_Id as the provided SearchByIDRequestSchemaId0
func (t *SearchByIDRequestSchema_Id) FromSearchByIDRequestSchemaId0(v SearchByIDRequestSchemaId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchByIDRequestSchemaId0 performs a merge with any union data inside the SearchByIDRequestSchema_Id, using the provided SearchByIDRequestSchemaId0
func (t *SearchByIDRequestSchema_Id) MergeSearchByIDRequestSchemaId0(v SearchByIDRequestSchemaId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsSearchByIDRequestSchemaId1 returns the union data inside the SearchByIDRequestSchema_Id as a SearchByIDRequestSchemaId1
func (t SearchByIDRequestSchema_Id) AsSearchByIDRequestSchemaId1() (SearchByIDRequestSchemaId1, error) {
	var body SearchByIDRequestSchemaId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchByIDRequestSchemaId1 overwrites any union data inside the SearchByIDRequestSchema_Id as the provided SearchByIDRequestSchemaId1
func (t *SearchByIDRequestSchema_Id) FromSearchByIDRequestSchemaId1(v SearchByIDRequestSchemaId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchByIDRequestSchemaId1 performs a merge with any union data inside the SearchByIDRequestSchema_Id, using the provided SearchByIDRequestSchemaId1
func (t *SearchByIDRequestSchema_Id) MergeSearchByIDRequestSchemaId1(v SearchByIDRequestSchemaId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t SearchByIDRequestSchema_Id) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SearchByIDRequestSchema_Id) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorDataSchema returns the union data inside the SearchByIDResponseSchema_Data as a ErrorDataSchema
func (t SearchByIDResponseSchema_Data) AsErrorDataSchema() (ErrorDataSchema, error) {
	var body ErrorDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDataSchema overwrites any union data inside the SearchByIDResponseSchema_Data as the provided ErrorDataSchema
func (t *SearchByIDResponseSchema_Data) FromErrorDataSchema(v ErrorDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDataSchema performs a merge with any union data inside the SearchByIDResponseSchema_Data, using the provided ErrorDataSchema
func (t *SearchByIDResponseSchema_Data) MergeErrorDataSchema(v ErrorDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsSearchByIDResponseDataSchema returns the union data inside the SearchByIDResponseSchema_Data as a SearchByIDResponseDataSchema
func (t SearchByIDResponseSchema_Data) AsSearchByIDResponseDataSchema() (SearchByIDResponseDataSchema, error) {
	var body SearchByIDResponseDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchByIDResponseDataSchema overwrites any union data inside the SearchByIDResponseSchema_Data as the provided SearchByIDResponseDataSchema
func (t *SearchByIDResponseSchema_Data) FromSearchByIDResponseDataSchema(v SearchByIDResponseDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchByIDResponseDataSchema performs a merge with any union data inside the SearchByIDResponseSchema_Data, using the provided SearchByIDResponseDataSchema
func (t *SearchByIDResponseSchema_Data) MergeSearchByIDResponseDataSchema(v SearchByIDResponseDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t SearchByIDResponseSchema_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SearchByIDResponseSchema_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorDataSchema returns the union data inside the SearchResponseSchema_Data as a ErrorDataSchema
func (t SearchResponseSchema_Data) AsErrorDataSchema() (ErrorDataSchema, error) {
	var body ErrorDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDataSchema overwrites any union data inside the SearchResponseSchema_Data as the provided ErrorDataSchema
func (t *SearchResponseSchema_Data) FromErrorDataSchema(v ErrorDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDataSchema performs a merge with any union data inside the SearchResponseSchema_Data, using the provided ErrorDataSchema
func (t *SearchResponseSchema_Data) MergeErrorDataSchema(v ErrorDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsSearchResponseDataSchema returns the union data inside the SearchResponseSchema_Data as a SearchResponseDataSchema
func (t SearchResponseSchema_Data) AsSearchResponseDataSchema() (SearchResponseDataSchema, error) {
	var body SearchResponseDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchResponseDataSchema overwrites any union data inside the SearchResponseSchema_Data as the provided SearchResponseDataSchema
func (t *SearchResponseSchema_Data) FromSearchResponseDataSchema(v SearchResponseDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchResponseDataSchema performs a merge with any union data inside the SearchResponseSchema_Data, using the provided SearchResponseDataSchema
func (t *SearchResponseSchema_Data) MergeSearchResponseDataSchema(v SearchResponseDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t SearchResponseSchema_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SearchResponseSchema_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorDataSchema returns the union data inside the SearchSoftwareResponseSchema_Data as a ErrorDataSchema
func (t SearchSoftwareResponseSchema_Data) AsErrorDataSchema() (ErrorDataSchema, error) {
	var body ErrorDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDataSchema overwrites any union data inside the SearchSoftwareResponseSchema_Data as the provided ErrorDataSchema
func (t *SearchSoftwareResponseSchema_Data) FromErrorDataSchema(v ErrorDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDataSchema performs a merge with any union data inside the SearchSoftwareResponseSchema_Data, using the provided ErrorDataSchema
func (t *SearchSoftwareResponseSchema_Data) MergeErrorDataSchema(v ErrorDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsSearchSoftwareDataSchema returns the union data inside the SearchSoftwareResponseSchema_Data as a SearchSoftwareDataSchema
func (t SearchSoftwareResponseSchema_Data) AsSearchSoftwareDataSchema() (SearchSoftwareDataSchema, error) {
	var body SearchSoftwareDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSearchSoftwareDataSchema overwrites any union data inside the SearchSoftwareResponseSchema_Data as the provided SearchSoftwareDataSchema
func (t *SearchSoftwareResponseSchema_Data) FromSearchSoftwareDataSchema(v SearchSoftwareDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSearchSoftwareDataSchema performs a merge with any union data inside the SearchSoftwareResponseSchema_Data, using the provided SearchSoftwareDataSchema
func (t *SearchSoftwareResponseSchema_Data) MergeSearchSoftwareDataSchema(v SearchSoftwareDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t SearchSoftwareResponseSchema_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SearchSoftwareResponseSchema_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
